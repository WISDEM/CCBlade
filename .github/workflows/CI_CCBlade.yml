name: CI_CCBlade

# We run CI on push commits and pull requests on all branches
on: [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    build_pip:
        name: Pip Build (${{ matrix.os }}) - ${{ matrix.python-version }}
        runs-on: ${{ matrix.os }}
        defaults:
            run:
                shell: bash -l {0}
                
        strategy:
            fail-fast: false #true
            matrix:
                os: ["ubuntu-latest", "macOS-14", "windows-latest"]
                python-version: ["3.11", "3.12", "3.13"]

        steps:
            - name: Setup GNU Fortran
            #  if: false == contains( matrix.os, 'windows')
              uses: fortran-lang/setup-fortran@v1 #modflowpy/install-intelfortran-action@v1 #
              
            - name: checkout repository
              uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              id: cp
              with:
                  python-version: ${{ matrix.python-version }}
                  update-environment: true
                  
            #- name: Setup tmate session
            #  if: contains( matrix.os, 'windows')
            #  uses: mxschmitt/action-tmate@v3
              
            - name: Pip Install CCBlade
              env:
                  MESON_ARGS: -Dpython_target=${{ steps.cp.outputs.python-path }}
              run: |
                  '${{ steps.cp.outputs.python-path }}' -m pip install -v -e .[test]

            - name: Test run
              run: |
                  cd test
                  '${{ steps.cp.outputs.python-path }}' -m pytest .


    build_conda:
        name: Conda Build (${{ matrix.os }}) - ${{ matrix.python-version }}
        runs-on: ${{ matrix.os }}
        defaults:
            run:
                shell: bash -el {0}
                
        strategy:
            fail-fast: false #true
            matrix:
                os: ["ubuntu-latest", "macOS-14", "windows-latest"]
                python-version: ["3.11", "3.12", "3.13"]

        steps:
            - name: checkout repository
              uses: actions/checkout@v4

            - uses: conda-incubator/setup-miniconda@v3
              # https://github.com/marketplace/actions/setup-miniconda
              with:
                  #mamba-version: "*"
                  miniforge-version: "latest"
                  auto-update-conda: true
                  python-version: ${{ matrix.python-version }}
                  environment-file: environment.yml
                  activate-environment: test
                  auto-activate-base: false

            - name: Add dependencies windows specific
              if: contains( matrix.os, 'windows')
              run: |
                  conda install -y m2w64-toolchain libpython
                  
            - name: Add dependencies mac specific
              if: false == contains( matrix.os, 'windows')
              run: |
                  conda install -y gfortran
                  gfortran --version

            # Install 
            - name: Debug
              run: |
                  conda list
                  which -a gfortran
                  printenv

            #- name: Setup tmate session
            #  uses: mxschmitt/action-tmate@v3
            #  with:
            #      detached: true
            #  if: contains( matrix.os, 'windows')
                    
            # Install 
            - name: Conda Install CCBlade
              env:
                  MESON_ARGS: ""
              run: |
                  pip install --no-build-isolation --no-deps -e . -v

            - name: Test run
              run: |
                  cd test
                  pytest .

